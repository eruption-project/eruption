// This code was autogenerated with `dbus-codegen-rust --prop-newtype --destination org.eruption.process_monitor --path /org/eruption/process_monitor/rules`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgEruptionProcessMonitorRules {
    fn enum_rules(&self) -> Result<Vec<(String, String, String, String)>, dbus::Error>;
    fn set_rules(&self, rules: Vec<(&str, &str, &str, &str)>) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgEruptionProcessMonitorRulesRulesChanged {
    pub rules: Vec<(String, String, String, String)>,
}

impl arg::AppendAll for OrgEruptionProcessMonitorRulesRulesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.rules, i);
    }
}

impl arg::ReadAll for OrgEruptionProcessMonitorRulesRulesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgEruptionProcessMonitorRulesRulesChanged { rules: i.read()? })
    }
}

impl dbus::message::SignalArgs for OrgEruptionProcessMonitorRulesRulesChanged {
    const NAME: &'static str = "RulesChanged";
    const INTERFACE: &'static str = "org.eruption.process_monitor.Rules";
}

pub const ORG_ERUPTION_PROCESS_MONITOR_RULES_NAME: &str = "org.eruption.process_monitor.Rules";

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgEruptionProcessMonitorRules for blocking::Proxy<'a, C>
{
    fn enum_rules(&self) -> Result<Vec<(String, String, String, String)>, dbus::Error> {
        self.method_call("org.eruption.process_monitor.Rules", "EnumRules", ()).map(|r: (Vec<(String, String, String, String)>,)| r.0)
    }

    fn set_rules(&self, rules: Vec<(&str, &str, &str, &str)>) -> Result<(), dbus::Error> {
        self.method_call("org.eruption.process_monitor.Rules", "SetRules", (rules,))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

pub const ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_NAME: &str = "org.freedesktop.DBus.Introspectable";

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C>
{
    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ()).map(|r: (String,)| r.0)
    }
}
