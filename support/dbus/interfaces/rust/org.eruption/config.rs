// This code was autogenerated with `dbus-codegen-rust --system-bus --prop-newtype --destination org.eruption --path /org/eruption/config`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgEruptionConfig {
    fn get_color_scheme(&self, name: &str) -> Result<Vec<u8>, dbus::Error>;
    fn get_color_schemes(&self) -> Result<Vec<String>, dbus::Error>;
    fn ping(&self) -> Result<bool, dbus::Error>;
    fn ping_privileged(&self) -> Result<bool, dbus::Error>;
    fn remove_color_scheme(&self, name: &str) -> Result<bool, dbus::Error>;
    fn set_color_scheme(&self, name: &str, data: Vec<u8>) -> Result<bool, dbus::Error>;
    fn write_file(&self, filename: &str, data: &str) -> Result<bool, dbus::Error>;
    fn brightness(&self) -> Result<i64, dbus::Error>;
    fn set_brightness(&self, value: i64) -> Result<(), dbus::Error>;
    fn enable_sfx(&self) -> Result<bool, dbus::Error>;
    fn set_enable_sfx(&self, value: bool) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgEruptionConfigBrightnessChanged {
    pub brightness: i64,
}

impl arg::AppendAll for OrgEruptionConfigBrightnessChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.brightness, i);
    }
}

impl arg::ReadAll for OrgEruptionConfigBrightnessChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgEruptionConfigBrightnessChanged {
            brightness: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgEruptionConfigBrightnessChanged {
    const NAME: &'static str = "BrightnessChanged";
    const INTERFACE: &'static str = "org.eruption.Config";
}

pub const ORG_ERUPTION_CONFIG_NAME: &str = "org.eruption.Config";

#[derive(Copy, Clone, Debug)]
pub struct OrgEruptionConfigProperties<'a>(pub &'a arg::PropMap);

impl<'a> OrgEruptionConfigProperties<'a> {
    pub fn from_interfaces(
        interfaces: &'a ::std::collections::HashMap<String, arg::PropMap>,
    ) -> Option<Self> {
        interfaces.get("org.eruption.Config").map(Self)
    }

    pub fn brightness(&self) -> Option<i64> {
        arg::prop_cast(self.0, "Brightness").copied()
    }

    pub fn enable_sfx(&self) -> Option<bool> {
        arg::prop_cast(self.0, "EnableSfx").copied()
    }
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgEruptionConfig
    for blocking::Proxy<'a, C>
{
    fn get_color_scheme(&self, name: &str) -> Result<Vec<u8>, dbus::Error> {
        self.method_call("org.eruption.Config", "GetColorScheme", (name,))
            .and_then(|r: (Vec<u8>,)| Ok(r.0))
    }

    fn get_color_schemes(&self) -> Result<Vec<String>, dbus::Error> {
        self.method_call("org.eruption.Config", "GetColorSchemes", ())
            .and_then(|r: (Vec<String>,)| Ok(r.0))
    }

    fn ping(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.eruption.Config", "Ping", ())
            .and_then(|r: (bool,)| Ok(r.0))
    }

    fn ping_privileged(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.eruption.Config", "PingPrivileged", ())
            .and_then(|r: (bool,)| Ok(r.0))
    }

    fn remove_color_scheme(&self, name: &str) -> Result<bool, dbus::Error> {
        self.method_call("org.eruption.Config", "RemoveColorScheme", (name,))
            .and_then(|r: (bool,)| Ok(r.0))
    }

    fn set_color_scheme(&self, name: &str, data: Vec<u8>) -> Result<bool, dbus::Error> {
        self.method_call("org.eruption.Config", "SetColorScheme", (name, data))
            .and_then(|r: (bool,)| Ok(r.0))
    }

    fn write_file(&self, filename: &str, data: &str) -> Result<bool, dbus::Error> {
        self.method_call("org.eruption.Config", "WriteFile", (filename, data))
            .and_then(|r: (bool,)| Ok(r.0))
    }

    fn brightness(&self) -> Result<i64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.eruption.Config",
            "Brightness",
        )
    }

    fn enable_sfx(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.eruption.Config",
            "EnableSfx",
        )
    }

    fn set_brightness(&self, value: i64) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.eruption.Config",
            "Brightness",
            value,
        )
    }

    fn set_enable_sfx(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.eruption.Config",
            "EnableSfx",
            value,
        )
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

pub const ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_NAME: &str = "org.freedesktop.DBus.Introspectable";

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C>
{
    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set(
        &self,
        interface_name: &str,
        property_name: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub const ORG_FREEDESKTOP_DBUS_PROPERTIES_NAME: &str = "org.freedesktop.DBus.Properties";

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusProperties
    for blocking::Proxy<'a, C>
{
    fn get(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface_name, property_name),
        )
        .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| Ok(r.0))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "GetAll",
            (interface_name,),
        )
        .and_then(|r: (arg::PropMap,)| Ok(r.0))
    }

    fn set(
        &self,
        interface_name: &str,
        property_name: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface_name, property_name, value),
        )
    }
}
