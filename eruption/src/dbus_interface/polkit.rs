/*  SPDX-License-Identifier: GPL-3.0-or-later  */

/*
    This file is part of Eruption.

    Eruption is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Eruption is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Eruption.  If not, see <http://www.gnu.org/licenses/>.

    Copyright (c) 2019-2023, The Eruption Development Team
*/

// This code was autogenerated with `dbus-codegen-rust -s -d org.freedesktop.PolicyKit1 -p /org/freedesktop/PolicyKit1/Authority -m None`, see https://github.com/diwic/dbus-rs

use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusProperties {
    fn get(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(
        &self,
        interface_name: &str,
    ) -> Result<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        dbus::Error,
    >;
    fn set(
        &self,
        interface_name: &str,
        property_name: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::Connection>> OrgFreedesktopDBusProperties
    for blocking::Proxy<'a, C>
{
    fn get(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface_name, property_name),
        )
        .map(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| r.0)
    }

    fn get_all(
        &self,
        interface_name: &str,
    ) -> Result<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "GetAll",
            (interface_name,),
        )
        .map(
            |r: (
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            )| r.0,
        )
    }

    fn set(
        &self,
        interface_name: &str,
        property_name: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface_name, property_name, value),
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::Connection>> OrgFreedesktopDBusIntrospectable
    for blocking::Proxy<'a, C>
{
    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .map(|r: (String,)| r.0)
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::Connection>> OrgFreedesktopDBusPeer
    for blocking::Proxy<'a, C>
{
    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .map(|r: (String,)| r.0)
    }
}

pub trait OrgFreedesktopPolicyKit1Authority {
    fn enumerate_actions(
        &self,
        locale: &str,
    ) -> Result<
        Vec<(
            String,
            String,
            String,
            String,
            String,
            String,
            u32,
            u32,
            u32,
            ::std::collections::HashMap<String, String>,
        )>,
        dbus::Error,
    >;
    fn check_authorization(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        action_id: &str,
        details: ::std::collections::HashMap<&str, &str>,
        flags: u32,
        cancellation_id: &str,
    ) -> Result<(bool, bool, ::std::collections::HashMap<String, String>), dbus::Error>;
    fn cancel_check_authorization(&self, cancellation_id: &str) -> Result<(), dbus::Error>;
    fn register_authentication_agent(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        locale: &str,
        object_path: &str,
    ) -> Result<(), dbus::Error>;
    fn register_authentication_agent_with_options(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        locale: &str,
        object_path: &str,
        options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<(), dbus::Error>;
    fn unregister_authentication_agent(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        object_path: &str,
    ) -> Result<(), dbus::Error>;
    fn authentication_agent_response(
        &self,
        cookie: &str,
        identity: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<(), dbus::Error>;
    fn authentication_agent_response2(
        &self,
        uid: u32,
        cookie: &str,
        identity: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<(), dbus::Error>;
    fn enumerate_temporary_authorizations(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<
        Vec<(
            String,
            String,
            (
                String,
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            ),
            u64,
            u64,
        )>,
        dbus::Error,
    >;
    fn revoke_temporary_authorizations(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<(), dbus::Error>;
    fn revoke_temporary_authorization_by_id(&self, id: &str) -> Result<(), dbus::Error>;
    fn backend_name(&self) -> Result<String, dbus::Error>;
    fn backend_version(&self) -> Result<String, dbus::Error>;
    fn backend_features(&self) -> Result<u32, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::Connection>> OrgFreedesktopPolicyKit1Authority
    for blocking::Proxy<'a, C>
{
    fn enumerate_actions(
        &self,
        locale: &str,
    ) -> Result<
        Vec<(
            String,
            String,
            String,
            String,
            String,
            String,
            u32,
            u32,
            u32,
            ::std::collections::HashMap<String, String>,
        )>,
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "EnumerateActions",
            (locale,),
        )
        .map(
            |r: (
                Vec<(
                    String,
                    String,
                    String,
                    String,
                    String,
                    String,
                    u32,
                    u32,
                    u32,
                    ::std::collections::HashMap<String, String>,
                )>,
            )| r.0,
        )
    }

    fn check_authorization(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        action_id: &str,
        details: ::std::collections::HashMap<&str, &str>,
        flags: u32,
        cancellation_id: &str,
    ) -> Result<(bool, bool, ::std::collections::HashMap<String, String>), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "CheckAuthorization",
            (subject, action_id, details, flags, cancellation_id),
        )
        .map(|r: ((bool, bool, ::std::collections::HashMap<String, String>),)| r.0)
    }

    fn cancel_check_authorization(&self, cancellation_id: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "CancelCheckAuthorization",
            (cancellation_id,),
        )
    }

    fn register_authentication_agent(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        locale: &str,
        object_path: &str,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "RegisterAuthenticationAgent",
            (subject, locale, object_path),
        )
    }

    fn register_authentication_agent_with_options(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        locale: &str,
        object_path: &str,
        options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "RegisterAuthenticationAgentWithOptions",
            (subject, locale, object_path, options),
        )
    }

    fn unregister_authentication_agent(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
        object_path: &str,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "UnregisterAuthenticationAgent",
            (subject, object_path),
        )
    }

    fn authentication_agent_response(
        &self,
        cookie: &str,
        identity: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "AuthenticationAgentResponse",
            (cookie, identity),
        )
    }

    fn authentication_agent_response2(
        &self,
        uid: u32,
        cookie: &str,
        identity: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "AuthenticationAgentResponse2",
            (uid, cookie, identity),
        )
    }

    fn enumerate_temporary_authorizations(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<
        Vec<(
            String,
            String,
            (
                String,
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            ),
            u64,
            u64,
        )>,
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "EnumerateTemporaryAuthorizations",
            (subject,),
        )
        .map(
            |r: (
                Vec<(
                    String,
                    String,
                    (
                        String,
                        ::std::collections::HashMap<
                            String,
                            arg::Variant<Box<dyn arg::RefArg + 'static>>,
                        >,
                    ),
                    u64,
                    u64,
                )>,
            )| r.0,
        )
    }

    fn revoke_temporary_authorizations(
        &self,
        subject: (
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        ),
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "RevokeTemporaryAuthorizations",
            (subject,),
        )
    }

    fn revoke_temporary_authorization_by_id(&self, id: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.PolicyKit1.Authority",
            "RevokeTemporaryAuthorizationById",
            (id,),
        )
    }

    fn backend_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.freedesktop.PolicyKit1.Authority",
            "BackendName",
        )
    }

    fn backend_version(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.freedesktop.PolicyKit1.Authority",
            "BackendVersion",
        )
    }

    fn backend_features(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.freedesktop.PolicyKit1.Authority",
            "BackendFeatures",
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopPolicyKit1AuthorityChanged {}

impl arg::AppendAll for OrgFreedesktopPolicyKit1AuthorityChanged {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for OrgFreedesktopPolicyKit1AuthorityChanged {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPolicyKit1AuthorityChanged {})
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPolicyKit1AuthorityChanged {
    const NAME: &'static str = "Changed";
    const INTERFACE: &'static str = "org.freedesktop.PolicyKit1.Authority";
}
